#include <bits/stdc++.h>
 
using namespace std;
 
#define int ll
 
typedef long long ll;
 
typedef tuple<int, int, int> iii;
 
typedef vector<bool> vb;
typedef vector<int> vi;
 
typedef vector<iii> viii;
 
vector<vi> reverseGraph;
vector<bool> accessToEnd;
 
const int INF = 1e15;
 
void dfs(int x)
{
    if(accessToEnd[x]) return;
    accessToEnd[x] = true;
    for(int y:reverseGraph[x]) dfs(y);
}
 
int32_t main()
{
    int n, m;
    cin >> n >> m;
 
    reverseGraph.assign(n, vi());
    accessToEnd.assign(n, false);
 
    vector<iii> edges;
    vector<int> dist(n, INF);
    dist[0] = 0;
    vector<int> pre(n, -1);
 
    for(int i = 0; i < m; i++)
    {
        int a, b, w;
        cin >> a >> b >> w;
        a--; b--;
        reverseGraph[b].push_back(a);
        edges.push_back({a, b, -w});
    }
 
    dfs(n-1);
 
    bool change = false;
 
    for(int i = 0; i < n; i++)
    {
        change = false;
        for(int j = 0; j < m; j++)
        {
            int a, b, w;
            tie(a, b, w) = edges[j];
            if(dist[a] < INF && dist[a]+w < dist[b])
            {
                change = true;
                dist[b] = dist[a]+w;
                pre[b] = a;
            }
        }
 
        if(change == false) break;
    }
 
    if(change == false)
    {
        cout << -dist[n-1];
        return 0;
    }
 
    vector<bool> visited(n, false);
    while(true)
    {
        change = false;
        for(int j = 0; j < m; j++)
        {
            int a, b, w;
            tie(a, b, w) = edges[j];
            if(dist[a] < INF && dist[a]+w < dist[b])
            {
                if(visited[b] == false)
                {
                    visited[b] = true;
                    if(accessToEnd[b])
                    {
                        cout << -1;
                        return 0;
                    }
                    change = true;
                }
                dist[b] = dist[a]+w;
                pre[b] = a;
            }
        }
 
        if(change == false) break;
    }    
 
    cout << -dist[n-1];
 
}
